Here's an in-depth look at advanced structured concurrency in Java 21 using a real-world scenario, 
modularized into multiple classes:

NOTE: Structured Concurrency in Java 21 automatically uses virtual threads by default ‚Äî when you use StructuredTaskScope.

üöÄ Real-world Scenario: User Dashboard Assembly
===============================================
Imagine a high-performance API endpoint that needs to fetch different pieces of user data concurrently:
	Profile (name, email)
	Recent activity
	Recommendations (only the fastest of two sources)

We want all data to either succeed or fail as a unit. Structured concurrency helps us avoid orphaned threads, provide cancellation, and
 easily propagate errors.
 
 
üîß Modular Design:
	üß© Components:
			DashboardService ‚Äì Orchestrates concurrent data retrieval using structured concurrency scopes.
			UserClient, ActivityClient, RecsClientA, RecsClientB ‚Äì Simulate external service calls.
			DashboardApp ‚Äì Entry point.
			Model classes: UserProfile, UserActivity, Recommendation, UserDashboard.

			
‚úÖ Why Structured Concurrency?
==============================
| Benefit                     | Description                                                                  |
| --------------------------- | ---------------------------------------------------------------------------- |
| **No Orphans**              | If one fetch fails, all others are cancelled automatically ([medium.com][1]) |
| **Clean error handling**    | `throwIfFailed()` centralizes error propagation                              |
| **Racing safely**           | We can start two rec services and use whichever finishes first               |
| **Readable & maintainable** | Concurrency logic clearly scoped and structured nested                       |


When do we use Structured Concurrency?
=====================================
Structured Concurrency is used when you want to manage multiple concurrent tasks in a predictable, readable,
 and safe way. It enforces a structured lifecycle for threads: they start and finish together, and their 
 errors and results are handled as a unit ‚Äî like structured code blocks for concurrency.
 
‚úÖ You Should Use Structured Concurrency When:
=============================================
1. You have multiple concurrent tasks that are logically related
	These tasks together serve a single purpose ‚Äî if one fails, the others should stop too.

	Example: Assembling a user dashboard:
		Fetch profile
		Fetch recent activity
		Fetch recommendations
			‚Üí If one fails, the entire dashboard request should fail.
			
 2. You need robust error handling and cancellation
	If one task fails, others should be automatically cancelled to prevent resource waste or inconsistencies.
	Without structured concurrency: orphaned threads, subtle memory leaks
	With structured concurrency: failures are scoped and predictable
	
3. You want to improve readability and maintainability
Structured concurrency follows the same scoping principles as methods and blocks ‚Äî making concurrency easier to reason about.

4. You want cancellation, deadlines, and aggregation in one place
Java 21 scopes can be shut down on failure, success, timeout, etc.


5. You are building I/O-heavy applications (with virtual threads)
Structured concurrency works extremely well with virtual threads. Great for:
	Microservices
	Dashboards
	REST aggregators
	Parallel web/data fetchers
	High-concurrency APIs
	

‚ùå You Should NOT Use Structured Concurrency When:
==================================================
| Situation                                              | Why?                                                           |
| ------------------------------------------------------ | -------------------------------------------------------------- |
| **Only 1 background task**                             | No concurrency ‚Üí unnecessary overhead                          |
| **Tasks are completely independent**                   | Not logically grouped, no benefit from joint lifecycle         |
| **You need long-lived threads (e.g., daemon polling)** | Structured concurrency scopes are short-lived                  |
| **Pre-Java 21**                                        | Structured concurrency is only supported starting from Java 21 |


